# Copyright (c) 2022 Shenzhen Kaihong Digital Industry Development Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# external glslang src glslang build

import("//build/ohos.gni")
import("//third_party/VK-GL-CTS/vk_gl_cts.gni")

config("src_glslang_config") {
  cflags_cc = deqp_common_cflags_cc

  cflags_cc -= [
    "-frtti",
    "-fexceptions",
  ]
  cflags_cc += [
    "-fPIC", 
    "-Wno-reorder",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wno-sign-compare",
    "-Wno-missing-field-initializers",
    "-Wno-unused-parameter",
  ]

  defines = deqp_common_defines
  defines -= [
    "DEQP_SUPPORT_DRM=0",
    "DEQP_TARGET_NAME=\"Default\"",
  ]
  defines += [
    "ENABLE_HLSL",
    "ENABLE_OPT=0",
    "GLSLANG_OSINCLUDE_UNIX",
  ]
}

#lib OSDependent
ohos_source_set("OSDependent_source") {
  sources = [
    "//third_party/glslang/src/glslang/OSDependent/Unix/ossource.cpp",
  ]
  include_dirs = [
    "//third_party/glslang/src/glslang/OSDependent",
    "//third_party/zlib/src",
    "//third_party/glslang/src/glslang/Include",
    "//third_party/glslang/src/glslang/Public",
  ]
  include_dirs += deqp_common_include_dirs

  deps = []
  configs = [ ":src_glslang_config" ]
}

ohos_static_library("libdeqp_OSDependent") {
  deps = [ ":OSDependent_source" ]
  part_name = "graphic_standard"
  subsystem_name = "graphic"
}

#lib GenericCodeGen
ohos_source_set("GenericCodeGen_source") {
  sources = [
    "//third_party/glslang/src/glslang/GenericCodeGen/CodeGen.cpp",
    "//third_party/glslang/src/glslang/GenericCodeGen/Link.cpp",
  ]
  include_dirs = [
    "//third_party/zlib/src",
    "//third_party/glslang/src/glslang/Include",
    "//third_party/glslang/src/glslang/Public",
  ]
  include_dirs += deqp_common_include_dirs

  deps = []

  configs = [ ":src_glslang_config" ]
}

ohos_static_library("libdeqp_GenericCodeGen") {
  deps = [ ":GenericCodeGen_source" ]
  part_name = "graphic_standard"
  subsystem_name = "graphic"
}

#lib MachineIndependent
ohos_source_set("MachineIndependent_source") {
  sources = [
    "//third_party/glslang/src/glslang/HLSL/hlslAttributes.cpp",
    "//third_party/glslang/src/glslang/HLSL/hlslGrammar.cpp",
    "//third_party/glslang/src/glslang/HLSL/hlslOpMap.cpp",
    "//third_party/glslang/src/glslang/HLSL/hlslParseHelper.cpp",
    "//third_party/glslang/src/glslang/HLSL/hlslParseables.cpp",
    "//third_party/glslang/src/glslang/HLSL/hlslScanContext.cpp",
    "//third_party/glslang/src/glslang/HLSL/hlslTokenStream.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/Constant.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/InfoSink.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/Initialize.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/IntermTraverse.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/Intermediate.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/ParseContextBase.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/ParseHelper.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/PoolAlloc.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/RemoveTree.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/Scan.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/ShaderLang.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/SpirvIntrinsics.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/SymbolTable.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/Versions.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/attribute.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/glslang_tab.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/intermOut.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/iomapper.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/limits.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/linkValidate.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/parseConst.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/preprocessor/Pp.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/preprocessor/PpAtom.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/preprocessor/PpContext.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/preprocessor/PpScanner.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/preprocessor/PpTokens.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/propagateNoContraction.cpp",
    "//third_party/glslang/src/glslang/MachineIndependent/reflection.cpp",
    #"//third_party/VK-GL-CTS/build/external/glslang/src/cmake_pch.hxx",
    #"//third_party/VK-GL-CTS/build/external/glslang/src/cmake_pch.hxx.cxx",
  ]
  include_dirs = [
    "//third_party/zlib/src",
    "//third_party/VK-GL-CTS/build/include",
    "//third_party/glslang/src/glslang/Include",
    "//third_party/glslang/src/glslang/Public",
  ]
  include_dirs += deqp_common_include_dirs

  deps = [
    "//third_party/glslang/src/OGLCompilersDLL:libdeqp_OGLCompiler",
    ":libdeqp_OSDependent",
    ":libdeqp_GenericCodeGen",
  ]

  configs = [ ":src_glslang_config" ]
}

ohos_static_library("libdeqp_MachineIndependent") {
  deps = [ ":MachineIndependent_source" ]
  part_name = "graphic_standard"
  subsystem_name = "graphic"
}

#lib glslang
ohos_source_set("glslang_source") {
  sources = [
    "//third_party/glslang/src/glslang/CInterface/glslang_c_interface.cpp",
  ]
  include_dirs = [
    "//third_party/zlib/src",
    "//third_party/VK-GL-CTS/build/include",
    "//third_party/glslang/src",
    "//third_party/glslang/src/glslang/Include",
    "//third_party/glslang/src/glslang/Public",
  ]
  include_dirs += deqp_common_include_dirs

  deps = [
    "//third_party/glslang/src/OGLCompilersDLL:libdeqp_OGLCompiler",
    ":libdeqp_OSDependent",
    ":libdeqp_MachineIndependent",
    ":libdeqp_GenericCodeGen",
  ]
  configs = [ ":src_glslang_config" ]
}

ohos_static_library("libdeqp_glslang") {
  deps = [ ":glslang_source" ]
  part_name = "graphic_standard"
  subsystem_name = "graphic"
}